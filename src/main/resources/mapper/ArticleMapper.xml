<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hyundai.cc.articlemanage.article.mapper.ArticleMapper">
    <select id="getAllArticleList" resultType="hyundai.cc.articlemanage.article.dto.ArticleDTO">
        <![CDATA[
        select a.articleId as Id, a.title, a.content, a.regdate, a.updateDate, a.views, a.is_notice,
            a.WRITERID,
            a.lectureId as lectureId,
            nvl(l.TITLE, '') as lectureTitle
        from article a
        left outer join USER_INFO u on a.WRITERID = u.id
        left outer join LECTURE l on a.lectureid = l.LECTUREID
        order by ARTICLEID desc
        ]]>
    </select>

    <select id="getArticleListByLectureWithPaginationFirst" parameterType="hyundai.cc.domain.ArticleCriteria" resultType="hyundai.cc.articlemanage.article.dto.ArticleDTO">
        <![CDATA[
        SELECT a.articleId as Id, a.title, a.content, a.regdate, a.updateDate, a.views, a.is_notice,
               a.WRITERID,
               a.lectureId as lectureId,
               NVL(l.TITLE, 'lecture title null') AS lectureTitle
        FROM (
                 SELECT articleId, title, content, regdate, updateDate, views, is_notice,
                        WRITERID, LECTUREID,
                        ROW_NUMBER() OVER (ORDER BY ARTICLEID DESC) AS rnum
                 FROM ARTICLE
                 WHERE LECTUREID = #{Id}
             ) a
                 LEFT OUTER JOIN USER_INFO u ON a.WRITERID = u.id
                 LEFT OUTER JOIN LECTURE l ON a.LECTUREID = l.LECTUREID
        WHERE a.rnum <= #{amount}
        ORDER BY a.rnum
        ]]>
    </select>

    <select id="getArticleListByLectureWithPagination" parameterType="hyundai.cc.domain.ArticleCriteria" resultType="hyundai.cc.articlemanage.article.dto.ArticleDTO">
        <![CDATA[
        SELECT a.articleId as Id, a.title, a.content, a.regdate, a.updateDate, a.views, a.is_notice,
               a.WRITERID,
               a.lectureId as lectureId,
               NVL(l.TITLE, '') AS lectureTitle
        FROM (
                 SELECT articleId, title, content, regdate, updateDate, views, is_notice,
                        WRITERID, LECTUREID,
                        ROW_NUMBER() OVER (ORDER BY ARTICLEID DESC) AS rnum
                 FROM ARTICLE
                 WHERE LECTUREID = #{Id} and ARTICLEID < #{cursor}
             ) a
                 LEFT OUTER JOIN USER_INFO u ON a.WRITERID = u.id
                 LEFT OUTER JOIN LECTURE l ON a.LECTUREID = l.LECTUREID
        WHERE a.rnum <= #{amount}
        ORDER BY a.rnum
        ]]>
    </select>

    <select id="getArticleDetail" parameterType="_long" resultType="hyundai.cc.articlemanage.article.dto.ArticleDTO">
        <![CDATA[
        select  a.articleId as Id, a.title, a.content, a.regdate, a.updateDate, a.views, a.is_notice,
                a.WRITERID,
               a.lectureId as lectureId,
               nvl(l.TITLE, 'lecture title null') as lectureTitle
        from article a
                 left outer join USER_INFO u on a.WRITERID = u.id
                 left outer join LECTURE l on a.lectureid = l.LECTUREID
        where a.articleId = #{articleId}
        order by ARTICLEID desc
        ]]>
    </select>

    <select id="getTotal" parameterType="_long" resultType="_int">
        select count(ARTICLEID) from article where lectureid=#{lectureId}
    </select>

    <update id="updateHits" parameterType="_long">
        update ARTICLE set VIEWS = VIEWS + 1 where ARTICLEID=#{articleId}
    </update>

    <insert id="createArticle" parameterType="hyundai.cc.articlemanage.article.dto.ArticleCreateRequestDTO" useGeneratedKeys="true" keyColumn="articleId">
        insert into ARTICLE
        (ARTICLEID, TITLE, CONTENT, WRITERID, LECTUREID)
        values (articleID_seq.nextval, #{title}, #{content}, #{writerId}, #{lectureId})
    </insert>

    <update id="updateArticle" parameterType="hyundai.cc.articlemanage.article.dto.ArticleCreateRequestDTO">
        update ARTICLE
        set TITLE = #{title},
            CONTENT = #{content},
            UPDATEDATE = sysdate,
            WRITERID = #{writerId},
            LECTUREID = #{lectureId}
        where ARTICLEID=#{articleId}
    </update>


    <delete id="deleteArticle">
        delete ARTICLE
        where ARTICLEID = #{articleId} and WRITERID = #{writerId}
    </delete>

</mapper>